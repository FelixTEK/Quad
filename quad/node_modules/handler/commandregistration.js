const config = require("config");
const i18n = require("i18n");
const { REST } = require("@discordjs/rest");
const { Routes } = require("discord-api-types/v9");
const { SlashCommandBuilder } = require("@discordjs/builders");
const SimpleHandlerCommand = require("./simplehandlercommand");
const HandlerCommandParent = require("./handlercommandparent");

const T_BOTNAME = {"botname": config.get("bot.name")};

const rest = new REST({version: "9"}).setToken(config.get("discord.token"));

const addOption = (builder, type, func) => {
	switch (type) {
		case "string":
		case "city":
			builder.addStringOption(func);
			break;
		case "number":
			builder.addNumberOption(func);
			break;
		case "integer":
			builder.addIntegerOption(func);
			break;
		case "user":
			builder.addUserOption(func);
			break;
		default:
			// Unknown option type
			break;
	}
}

const buildSimpleCommand = (command, builder, t) => {
	builder.setDescription(t(command.opts.description, T_BOTNAME));
	for (const argument of command.args) {
		addOption(builder, argument.type, option => {
			return option.setName(argument.name)
				.setDescription(t(argument.description, T_BOTNAME))
				.setRequired(!argument.optional);
		});
	}
}

const buildCommandParent = (command, builder, t) => {
	builder.setDescription(t(command.opts.description, T_BOTNAME));
	for (const [name, sub] of Object.entries(command.subcommands)) {
		builder.addSubcommand(subbuilder => {
			subbuilder.setName(name);
			buildCommand(sub, subbuilder, t);
			return subbuilder;
		});
	}
}

const buildCommand = (command, builder, t) => {
	switch (command.constructor) {
		case SimpleHandlerCommand:
			buildSimpleCommand(command, builder, t);
			break;
		case HandlerCommandParent:
			buildCommandParent(command, builder, t);
			break;
		default:
			// Unknown command type
			break;
	}
}

let json;

const push = (commands, t, route) => {
	if (json) return rest.put(route, {body: json});
	
	json = [];
	for (const [name, command] of Object.entries(commands)) {
		const builder = new SlashCommandBuilder().setName(name);
		buildCommand(command, builder, t);
		json.push(builder.toJSON());
	}
	return rest.put(route, {body: json});
}

const pushGlobally = (commands) => {
	return push(commands, i18n.t, Routes.applicationCommands(config.get("discord.clientid")));
}

const pushGuild = (commands, guildid) => {
	return push(commands, i18n.t, Routes.applicationGuildCommands(config.get("discord.clientid"), guildid));
}

module.exports = {pushGlobally, pushGuild};
