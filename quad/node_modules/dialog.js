const handler = require("handler");
const ignore = require("ignore");
const moment = require("moment");

class Dialog {
    #user;
    #channel;
    #translator;
    #opts;
    
    #message;
    #executing;
    #timeout;
    
    #resolve;
    #reject;
    
    constructor(user, channel, t, opts) {
        //Check the options for required properties
        if (!opts.title) throw new Error("Dialog Title not specified");
        if (!opts.pending) throw new Error("Pending Message not specified");
        if (!opts.success) throw new Error("Success Message not specified");
        if (!opts.failure) throw new Error("Failure Message not specified");
        
        if (!opts.emoji) opts.emoji = "ðŸš«"; // :no_entry_sign:
        if (!opts.isConfirm) opts.isConfirm = false;
        if (!opts.fields) opts.fields = [];
        if (!opts.timeout) opts.timeout = 5000;
        
        this.#opts = opts;
        this.#executing = false;
        this.#user = user;
        this.#channel = channel;
        this.#translator = t;
        
        this.cont = this.cont.bind(this);
        this.cancel = this.cancel.bind(this);
        this.reactionMade = this.reactionMade.bind(this);
    }
    
    cont() {
        let t = this.#translator;
        handler.stopListen("messageReactionAdd", this.reactionMade);
        
        clearTimeout(this.#timeout);
        
        this.#message.edit({
            embed: {
                title: this.#opts.title,
                description: this.#opts.success,
                footer: {
                    text: t("Fulfilled.")
                },
                fields: this.#opts.fields
            }
        });
        this.#message.removeReactions().catch(ignore);
        this.#resolve();
    }
    
    cancel() {
        let t = this.#translator;
        handler.stopListen("messageReactionAdd", this.reactionMade);
        
        clearTimeout(this.#timeout);
        
        this.#message.edit({
            embed: {
                title: this.#opts.title,
                description: this.#opts.failure,
                footer: {
                    text: t("Canceled.")
                }
            }
        });
        this.#message.removeReactions().catch(ignore);
        this.#reject();
    }
    
    reactionMade(message, emoji, reactor) {
        if (message.id === this.#message.id && reactor.id === this.#user.id && emoji.name === this.#opts.emoji) {
            this.cancel();
        }
    }
    
    exec() {
        let t = this.#translator;
        if (this.#executing) throw new Error("Dialog is already executing");;
        this.#executing = true;
        
        return new Promise(async (res, rej) => {
            this.#resolve = res;
            this.#reject = rej;
            
            this.#message = await this.#channel.createMessage({
                embed: {
                    title: this.#opts.title,
                    description: this.#opts.pending,
                    footer: {
                        text: t("Mistake? React with {{emoji}} within {{count}} seconds.", {
                            emoji: this.#opts.emoji,
                            count: `${this.#opts.timeout / 1000}`
                        })
                    },
                    fields: this.#opts.fields
                }
            });
            this.#message.addReaction(this.#opts.emoji);
            
            handler.listen("messageReactionAdd", this.reactionMade);
            
            this.#timeout = setTimeout(this.cont, this.#opts.timeout);
        })
    }
}

module.exports = Dialog;
