const moment = require("moment");
const EventEmitter = require("events");

const debug = process.argv.includes("--debug");
const hasColor = !process.argv.includes("--no-color");

let reset = "";
if (hasColor) {
    reset = "\x1b[0m";
}

class Logger extends EventEmitter {
    #lines;
    
    constructor() {
        super();
        
        this.#lines = [];
    }
    
    log(text, severity = 1) {
        if (!debug && severity < 1) return;
    
        let color = "";
        if (hasColor) {
            switch (severity) {
                case 2:
                    color = "\x1b[32m";
                    break;
                case 3:
                    color = "\x1b[33m";
                    break;
                case 4:
                    color = "\x1b[31m";
            }
        }
        let time = moment().format("kk:mm:ss");
    
        for (let line of text.split("\n")) {
            console.log(`${color}[${time}] ${line}${reset}`);
            this.emit("line", `${color}[${time}] ${line}${reset}`);
            this.pushLine(`${color}[${time}] ${line}${reset}`);
        }
    }
    
    pushLine(line) {
        this.#lines.push(line);
        if (this.#lines.count > 1000) {
            this.#lines.shift();
        }
    }
    
    history() {
        return this.#lines;
    }
}

let l = new Logger();

module.exports = l.log.bind(l);

module.exports.debug = 0;
module.exports.info = 1
module.exports.success = 2;
module.exports.warn = 3;
module.exports.error = 4;

module.exports.Logger = l;
